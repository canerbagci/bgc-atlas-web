#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('worldbgcatlasweb:server');
var http = require('http');

var https = require('https');
var fs = require('fs');
var path = require('path');
var { validateSSLCertPath, validateRequiredPaths } = require('../utils/pathValidator');
var logger = require('../utils/logger');

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection:', reason);
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

let app;
try {
  app = require('../app');
} catch (err) {
  logger.error(err.message);
  process.exit(1);
}


const enableSSL = process.env.ENABLE_SSL !== 'false';

try {
  validateRequiredPaths();
} catch (err) {
  logger.error(err.message);
  process.exit(1);
}

let credentials;
if (enableSSL) {
  try {
    const certDir = process.env.SSL_CERT_PATH || '/etc/letsencrypt/live/bgc-atlas.cs.uni-tuebingen.de';
    validateSSLCertPath(certDir);
    const privateKey = fs.readFileSync(path.join(certDir, 'privkey.pem'), 'utf8');
    const certificate = fs.readFileSync(path.join(certDir, 'fullchain.pem'), 'utf8');
    const ca = fs.readFileSync(path.join(certDir, 'chain.pem'), 'utf8');
    credentials = { key: privateKey, cert: certificate, ca: ca };
  } catch (err) {
    logger.error(`SSL setup failed: ${err.message}. Falling back to HTTP.`);
  }
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || (credentials ? '443' : '80'));
app.set('port', port);


/**
 * Create HTTP server.
 */
//
let server;
if (credentials) {
  server = https.createServer(credentials, app);
  logger.info('Starting HTTPS server');
} else {
  server = http.createServer(app);
  logger.info('Starting HTTP server');
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      logger.error('Error occurred while starting server:', error);
      process.exit(1);
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.info('Listening on ' + bind);
}
